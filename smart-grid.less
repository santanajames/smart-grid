// Border Box Reset
html {
    box-sizing: border-box;
    -ms-overflow-style: scrollbar;
}

*,
*::before,
*::after {
    box-sizing: inherit;
}

@import '_variables';

@import 'mixins/_breakpoints';
@import 'mixins/_ruleset';
@import 'mixins/_styles';
@import 'mixins/_row';
@import 'mixins/_container';
@import 'mixins/_columns';
@import 'mixins/_loop-columns';

@import (reference) 'utilities/_base';
@import 'utilities/_offset';
@import 'utilities/_flex';
@import 'utilities/_visibility';

.breakpoints({
    .make-row(@_breakpoint-index, @_breakpoint-namespace);
    .make-container(@_breakpoint-index, @_breakpoint-namespace);
    .make-columns(@_breakpoint-index, @_breakpoint-namespace);
    .make-offsets(@_breakpoint-index, @_breakpoint-namespace);
    .make-flex-utils(@_breakpoint-index, @_breakpoint-namespace);
    .make-visibility-classes(@_breakpoint-namespace);

    [class*="@{grid-class-col}-@{_breakpoint-namespace}"] {
        &:extend(.col-base);
    }

    .@{grid-class-col}-@{_breakpoint-namespace} {
        flex-grow: 1;
        flex-basis: 0;
        max-width: 100%;
    }

    [class*="@{grid-class-col}-@{_breakpoint-namespace}"] {
        // need to check isnumber to be able to do math operations
        & when (isnumber(@_current-gutter)) {
            // Pass false for @_use-all-breakpoints since we dont need
            // to override this in all breakpoints
            .styles(padding-right, (@_current-gutter / 2), false, false);
            .styles(padding-left, (@_current-gutter / 2), false, false);
        }
        & when not (isnumber(@_current-gutter)) {
            .styles(padding-right, false, (@_last-gutter / 2), false);
            .styles(padding-left, false, (@_last-gutter / 2), false);
        }
    }
});
